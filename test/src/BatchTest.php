<?php

namespace Multoo\Shipping;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-20 at 11:43:02.
 */
class BatchTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Batch
     */
    protected $object;
    protected $providerFactoryMock;

    /**
     * @covers Multoo\Shipping\Batch::__construct
     */
    protected function setUp()
    {
        $this->providerFactoryMock = $this->getMockBuilder('Multoo\Shipping\Provider\ProviderFactory')
            ->disableOriginalConstructor()
            ->getMock();
        $this->object = new Batch($this->providerFactoryMock);
    }

    protected function tearDown()
    {
        
    }

    /**
     * @covers Multoo\Shipping\Batch::setShipper
     */
    public function testSetShipper()
    {
        $shipper = $this->getMock('\Multoo\Shipping\Shipper');
        $this->object->setShipper($shipper);
        $this->assertAttributeEquals($shipper, 'shipper', $this->object);
    }

    /**
     * @covers Multoo\Shipping\Batch::getShipper
     */
    public function testGetShipper()
    {
        $shipper = $this->getMock('\Multoo\Shipping\Shipper');

        $reflectionOffObject = new \ReflectionClass($this->object);
        $reflectionProperty = $reflectionOffObject->getProperty('shipper');
        $reflectionProperty->setAccessible(true);
        $reflectionProperty->setValue($this->object, $shipper);

        $this->assertEquals($shipper, $this->object->getShipper());
    }

    /**
     * @covers Multoo\Shipping\Batch::addShipment
     */
    public function testAddShipment()
    {
        $shipment = $this->getMock('\Multoo\Shipping\Shipment');
        $this->object->addShipment($shipment);
        $this->assertAttributeEquals([$shipment], 'shipments', $this->object);
    }

    /**
     * @covers Multoo\Shipping\Batch::getShipments
     */
    public function testGetShipments()
    {
        $shipment = $this->getMock('\Multoo\Shipping\Shipment');

        $reflectionOffObject = new \ReflectionClass($this->object);
        $reflectionProperty = $reflectionOffObject->getProperty('shipments');
        $reflectionProperty->setAccessible(true);
        $reflectionProperty->setValue($this->object, [$shipment]);

        $this->assertEquals([$shipment], $this->object->getShipments());
    }

    /**
     * @covers Multoo\Shipping\Batch::build
     */
    public function testBuild()
    {
        $provider = "Ups";
        $return = 'tested';

        $providerObject = $this->getMockBuilder('\Multoo\Shipping\Provider\ProviderFactory')
            ->disableOriginalConstructor()
            ->setMethods(['build'])
            ->getMock();

        $providerObject->expects($this->once())
            ->method('build')
            ->with($this->object)
            ->will($this->returnValue($return));

        $this->providerFactoryMock->expects($this->once())
            ->method('create')
            ->with($provider)
            ->will($this->returnValue($providerObject));

        $result = $this->object->build($provider);

        $this->assertEquals($return, $result);
    }
}
